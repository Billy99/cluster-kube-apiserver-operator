apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-apiserver
  namespace: kube-system
  labels:
    tier: "control-plane"
    k8s-app: "kube-apiserver"
    openshift.io/control-plane: "true"
    openshift.io/component: "api"
  annotations:
    openshift.io/run-level: "0"
spec:
  selector:
    matchLabels:
      tier: "control-plane"
      k8s-app: "kube-apiserver"
      openshift.io/control-plane: "true"
      openshift.io/component: "api"
  template:
    metadata:
      labels:
        tier: "control-plane"
        k8s-app: "kube-apiserver"
        openshift.io/control-plane: "true"
        openshift.io/component: "api"
    spec:
      securityContext:
        supplementalGroups: [65534]
      initContainers:
      - name: setup-lock-dir
        image: {{ .Image }}
        imagePullPolicy: {{ .ImagePullPolicy }}
        command: ["/bin/bash", "-c"]
        args:
        - |
          chgrp 65534 /var/lock
          chmod 775 /var/lock
        securityContext:
          runAsNonRoot: false
          privileged: true
        volumeMounts:
        - mountPath: /var/lock
          name: var-lock
      containers:
      - name: kube-apiserver
        image: {{ .Image }}
        imagePullPolicy: {{ .ImagePullPolicy }}
        command: ["/usr/bin/flock", "--exclusive", "--timeout=60", "/var/lock/api-server.lock", "-c"]
        args:
        - exec hypershift openshift-kube-apiserver --config=/etc/kubernetes/config/{{ .ConfigFileName }}
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          privileged: true
        volumeMounts:
        - mountPath: /var/lock
          name: var-lock
          readOnly: false
        - mountPath: /etc/ssl/certs
          name: ssl-certs-host
          readOnly: true
        - mountPath: /var/run/configmaps/config
          name: config
        - mountPath: /var/run/configmaps/aggregator-client-ca
          name: aggregator-client-ca
        - mountPath: /var/run/configmaps/client-ca
          name: client-ca
        - mountPath: /var/run/configmaps/etcd-serving-ca
          name: etcd-serving-ca
        - mountPath: /var/run/configmaps/kubelet-serving-ca
          name: kubelet-serving-ca
        - mountPath: /var/run/configmaps/sa-token-signing-certs
          name: sa-token-signing-certs
        - mountPath: /var/run/secrets/aggregator-client
          name: aggregator-client
        - mountPath: /var/run/secrets/etcd-client
          name: etcd-client
        - mountPath: /var/run/secrets/kubelet-client
          name: kubelet-client
        - mountPath: /var/run/secrets/serving-cert
          name: serving-cert
      hostNetwork: true
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      volumes:
      - name: config
        configMap:
          name: kube-apiserver-config
      - name: aggregator-client-ca
        configMap:
          name: aggregator-client-ca
      - name: client-ca
        configMap:
          name: client-ca
      - name: etcd-serving-ca
        configMap:
          name: etcd-serving-ca
      - name: kubelet-serving-ca
        configMap:
          name: kubelet-serving-ca
      - name: sa-token-signing-certs
        configMap:
          name: sa-token-signing-certs
      - name: aggregator-client
        secret:
          secretName: aggregator-client
      - name: etcd-client
        secret:
          secretName: etcd-client
      - name: kubelet-client
        secret:
          secretName: kubelet-client
      - name: serving-cert
        secret:
          secretName: serving-cert
      - hostPath:
          path: {{ .LockHostPath }}
        name: var-lock
      - hostPath:
          path: /etc/ssl/certs
        name: ssl-certs-host
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate