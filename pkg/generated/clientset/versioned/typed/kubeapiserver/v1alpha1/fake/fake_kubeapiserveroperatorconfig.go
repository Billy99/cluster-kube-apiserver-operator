// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openshift/cluster-kube-apiserver-operator/pkg/apis/kubeapiserver/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKubeAPIServerOperatorConfigs implements KubeAPIServerOperatorConfigInterface
type FakeKubeAPIServerOperatorConfigs struct {
	Fake *FakeKubeapiserverV1alpha1
}

var kubeapiserveroperatorconfigsResource = schema.GroupVersionResource{Group: "kubeapiserver.operator.openshift.io", Version: "v1alpha1", Resource: "kubeapiserveroperatorconfigs"}

var kubeapiserveroperatorconfigsKind = schema.GroupVersionKind{Group: "kubeapiserver.operator.openshift.io", Version: "v1alpha1", Kind: "KubeAPIServerOperatorConfig"}

// Get takes name of the kubeAPIServerOperatorConfig, and returns the corresponding kubeAPIServerOperatorConfig object, and an error if there is any.
func (c *FakeKubeAPIServerOperatorConfigs) Get(name string, options v1.GetOptions) (result *v1alpha1.KubeAPIServerOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(kubeapiserveroperatorconfigsResource, name), &v1alpha1.KubeAPIServerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KubeAPIServerOperatorConfig), err
}

// List takes label and field selectors, and returns the list of KubeAPIServerOperatorConfigs that match those selectors.
func (c *FakeKubeAPIServerOperatorConfigs) List(opts v1.ListOptions) (result *v1alpha1.KubeAPIServerOperatorConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(kubeapiserveroperatorconfigsResource, kubeapiserveroperatorconfigsKind, opts), &v1alpha1.KubeAPIServerOperatorConfigList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.KubeAPIServerOperatorConfigList{ListMeta: obj.(*v1alpha1.KubeAPIServerOperatorConfigList).ListMeta}
	for _, item := range obj.(*v1alpha1.KubeAPIServerOperatorConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kubeAPIServerOperatorConfigs.
func (c *FakeKubeAPIServerOperatorConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(kubeapiserveroperatorconfigsResource, opts))
}

// Create takes the representation of a kubeAPIServerOperatorConfig and creates it.  Returns the server's representation of the kubeAPIServerOperatorConfig, and an error, if there is any.
func (c *FakeKubeAPIServerOperatorConfigs) Create(kubeAPIServerOperatorConfig *v1alpha1.KubeAPIServerOperatorConfig) (result *v1alpha1.KubeAPIServerOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(kubeapiserveroperatorconfigsResource, kubeAPIServerOperatorConfig), &v1alpha1.KubeAPIServerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KubeAPIServerOperatorConfig), err
}

// Update takes the representation of a kubeAPIServerOperatorConfig and updates it. Returns the server's representation of the kubeAPIServerOperatorConfig, and an error, if there is any.
func (c *FakeKubeAPIServerOperatorConfigs) Update(kubeAPIServerOperatorConfig *v1alpha1.KubeAPIServerOperatorConfig) (result *v1alpha1.KubeAPIServerOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(kubeapiserveroperatorconfigsResource, kubeAPIServerOperatorConfig), &v1alpha1.KubeAPIServerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KubeAPIServerOperatorConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeKubeAPIServerOperatorConfigs) UpdateStatus(kubeAPIServerOperatorConfig *v1alpha1.KubeAPIServerOperatorConfig) (*v1alpha1.KubeAPIServerOperatorConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(kubeapiserveroperatorconfigsResource, "status", kubeAPIServerOperatorConfig), &v1alpha1.KubeAPIServerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KubeAPIServerOperatorConfig), err
}

// Delete takes name of the kubeAPIServerOperatorConfig and deletes it. Returns an error if one occurs.
func (c *FakeKubeAPIServerOperatorConfigs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(kubeapiserveroperatorconfigsResource, name), &v1alpha1.KubeAPIServerOperatorConfig{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKubeAPIServerOperatorConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(kubeapiserveroperatorconfigsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.KubeAPIServerOperatorConfigList{})
	return err
}

// Patch applies the patch and returns the patched kubeAPIServerOperatorConfig.
func (c *FakeKubeAPIServerOperatorConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.KubeAPIServerOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(kubeapiserveroperatorconfigsResource, name, data, subresources...), &v1alpha1.KubeAPIServerOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KubeAPIServerOperatorConfig), err
}
