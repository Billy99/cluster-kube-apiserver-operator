apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-apiserver
  namespace: kube-system
  labels:
    tier: "control-plane"
    k8s-app: "kube-apiserver"
    openshift.io/control-plane: "true"
    openshift.io/component: "api"
  annotations:
    openshift.io/run-level: "0"
spec:
  selector:
    matchLabels:
      tier: "control-plane"
      k8s-app: "kube-apiserver"
      openshift.io/control-plane: "true"
      openshift.io/component: "api"
  template:
    metadata:
      labels:
        tier: "control-plane"
        k8s-app: "kube-apiserver"
        openshift.io/control-plane: "true"
        openshift.io/component: "api"
    spec:
      securityContext:
        supplementalGroups: [65534]
      containers:
      - name: kube-apiserver
        image: {{ .Image }}
        imagePullPolicy: {{ .ImagePullPolicy }}
        command: ["/usr/bin/flock", "--exclusive", "--timeout=60", "/var/lock/api-server.lock", "-c"]
        args:
        - exec hypershift openshift-kube-apiserver --config=/etc/origin/master/{{ .ConfigFileName }}
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
        volumeMounts:
        - mountPath: /var/lock
          name: var-lock
          readOnly: false
        - mountPath: /etc/ssl/certs
          name: ssl-certs-host
          readOnly: true
        - mountPath: /etc/origin/master/
          name: master-config
          readOnly: true
        - mountPath: /etc/origin/cloudprovider/
          name: cloud-provider-config
          readOnly: true
      hostNetwork: true
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      volumes:
      - name: var-lock
        hostPath:
          path: /var/run/openshift/lock
      - name: ssl-certs-host
        hostPath:
          path: /usr/share/ca-certificates
      - name: master-config
        hostPath:
          path: {{ .ConfigHostPath }}
      - name: cloud-provider-config
        hostPath:
          path: {{ .CloudProviderHostPath }}
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate